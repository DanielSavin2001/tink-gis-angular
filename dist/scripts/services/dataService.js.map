{"version":3,"sources":["../../../src/scripts/services/dataService.js"],"names":[],"mappings":"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","file":"dataService.js","sourcesContent":["'use strict';\r\n(function () {\r\n    var module;\r\n    try {\r\n        module = angular.module('tink.gis');\r\n    } catch (e) {\r\n        module = angular.module('tink.gis', ['tink.accordion', 'tink.tinkApi', 'tink.modal']); //'leaflet-directive'\r\n    }\r\n    var dataService = function (MapData, map, GISService, ThemeHelper, WMSService, ThemeService, $q) {\r\n        var _dataService = {};\r\n        _dataService.Export = function () {\r\n            var exportObject = {};\r\n            var arr = MapData.Themes.map(theme => {\r\n                let returnitem = {};\r\n                returnitem.Naam = theme.Naam;\r\n                returnitem.CleanUrl = theme.CleanUrl;\r\n                returnitem.Type = theme.Type;\r\n                returnitem.Visible = theme.Visible;\r\n                returnitem.Layers = theme.AllLayers.filter(x => { return x.enabled == true; }).map(layer => {\r\n                    var returnlayer = {};\r\n                    // returnlayer.enabled = layer.enabled; // will always be true... since we only export the enabled layers\r\n                    returnlayer.visible = layer.visible;\r\n                    returnlayer.name = layer.name;\r\n                    returnlayer.id = layer.id;\r\n                    return returnlayer;\r\n                });\r\n                return returnitem;\r\n            });\r\n            exportObject.Themes = arr;\r\n            exportObject.Extent = map.getBounds();\r\n            exportObject.IsKaart = true;\r\n\r\n            return exportObject;\r\n        };\r\n        _dataService.Import = function (project) {\r\n            console.log(project);\r\n            _dataService.setExtent(project.extent);\r\n            let themesArray = [];\r\n            let promises = [];\r\n\r\n            project.themes.forEach(theme => {\r\n                if (theme.type == ThemeType.ESRI) {\r\n                    let prom = GISService.GetThemeData(theme.cleanUrl + '?f=pjson');\r\n                    promises.push(prom);\r\n                    prom.success(function (data, statuscode, functie, getdata) {\r\n                        themesArray.push(ThemeHelper.createThemeFromJson(data, getdata));\r\n                    });\r\n                } else {\r\n                    // wms\r\n                    let prom = WMSService.GetCapabilities(theme.cleanUrl);\r\n                    promises.push(prom);\r\n                    prom.success(function (data, status, headers, config) {\r\n                        themesArray.push(data);\r\n                    }).error(function (data, status, headers, config) {\r\n                        console.log('error!!!!!!!', data, status, headers, config);\r\n\r\n                    });\r\n                }\r\n\r\n            });\r\n            $q.all(promises).then(function () {\r\n                var orderedArray = [];\r\n                var errorMessages = [];\r\n                project.themes.forEach(theme => {\r\n                    var realTheme = themesArray.find(x => x.CleanUrl == theme.cleanUrl);\r\n                    realTheme.Visible = theme.visible;\r\n                    console.log(theme, ' vs real theme: ', realTheme);\r\n                    if (realTheme.AllLayers.length == theme.layers.length) {\r\n                        realTheme.Added = true; //all are added \r\n                    }\r\n                    else {\r\n                        realTheme.Added = null; // some are added, never false because else we woudn't save it.\r\n                    }\r\n                    realTheme.AllLayers.forEach(layer => {\r\n                        layer.enabled = false;  // lets disable all layers first\r\n                    });\r\n                    //lets check what we need to enable and set visiblity of, and also check what we don't find\r\n                    theme.layers.forEach(layer => {\r\n                        var realLayer = realTheme.AllLayers.find(x => x.name == layer.name);\r\n                        if (realLayer) {\r\n                            realLayer.visible = layer.visible; // aha so there was a layer, lets save this\r\n                            realLayer.enabled = true;\r\n                        }\r\n                        else {\r\n                            errorMessages.push('\"' + layer.name + '\" not found in mapserver: ' + realTheme.Naam + '.');\r\n                        }\r\n                    });\r\n                });\r\n                project.themes.forEach(theme => { // lets order them, since we get themesArray filled by async calls, the order can be wrong, thats why we make an ordered array\r\n                    var realTheme = themesArray.find(x => x.CleanUrl == theme.cleanUrl);\r\n                    orderedArray.unshift(realTheme);\r\n                });\r\n                ThemeService.AddAndUpdateThemes(orderedArray);\r\n                console.log('all loaded');\r\n                if (errorMessages.length > 0) {\r\n                    alert(errorMessages.join('\\n'));\r\n                }\r\n            });\r\n\r\n        };\r\n        _dataService.setExtent = function (extent) {\r\n\r\n            map.fitBounds([[extent._northEast.lat, extent._northEast.lng], [extent._southWest.lat, extent._southWest.lng]]);\r\n        };\r\n\r\n\r\n        return _dataService;\r\n    };\r\n    module.$inject = ['MapData', 'map', 'GISService', 'ThemeHelper', 'WMSService', 'ThemeService', '$q'];\r\n    module.factory('DataService', dataService);\r\n})();\r\n"]}