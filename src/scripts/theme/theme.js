"use strict";
'use strict';
class Theme {
    constructor() {
        this.UpdateDisplayed = (currentScale) => {
            this.AllLayers.forEach(layer => {
                layer.UpdateDisplayed(currentScale);
            });
        };
        this.UpdateMap = () => {
            this.RecalculateVisibleLayerIds();
            this.MapData.setLayers(this.VisibleLayerIds);
        };
        this.RecalculateVisibleLayerIds = () => {
            this.VisibleLayerIds.length = 0;
            this.VisibleLayers.forEach(visLayer => {
                this.VisibleLayerIds.push(visLayer.id);
            });
            if (this.VisibleLayerIds.length === 0) {
                this.VisibleLayerIds.push(-1);
            }
        };
    }
}
exports.Theme = Theme;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0aGVtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsWUFBWSxDQUFDO0FBQ2I7SUFBQTtRQXNCSSxvQkFBZSxHQUFHLENBQUMsWUFBWTtZQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLO2dCQUN4QixLQUFLLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3hDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFBO1FBQ0QsY0FBUyxHQUFHO1lBQ1IsSUFBSSxDQUFDLDBCQUEwQixFQUFFLENBQUM7WUFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2pELENBQUMsQ0FBQztRQUNGLCtCQUEwQixHQUFHO1lBQ3pCLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxRQUFRO2dCQUMvQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDM0MsQ0FBQyxDQUFDLENBQUM7WUFDSCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLENBQUM7UUFDTCxDQUFDLENBQUM7SUFDTixDQUFDO0FBQUQsQ0FBQztBQXhDcUIsYUFBSyxRQXdDMUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TGF5ZXJ9IGZyb20gJy4vbGF5ZXInO1xyXG4ndXNlIHN0cmljdCc7XHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUaGVtZSB7XHJcbiAgICBOYWFtOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBEZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gICAgQ2xlYW5Vcmw6IHN0cmluZztcclxuICAgIFVybDogc3RyaW5nO1xyXG5cclxuICAgIFZpc2libGU6IGJvb2xlYW47XHJcbiAgICBBZGRlZDogYm9vbGVhbjtcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgVHlwZTogc3RyaW5nO1xyXG4gICAgc3RhdHVzOiBudW1iZXI7XHJcblxyXG4gICAgVmlzaWJsZUxheWVySWRzOiBBcnJheTxudW1iZXI+O1xyXG4gICAgTGF5ZXJzOiBBcnJheTxMYXllcj47XHJcbiAgICBWaXNpYmxlTGF5ZXJzOiBBcnJheTxMYXllcj47XHJcbiAgICBBbGxMYXllcnM6IEFycmF5PExheWVyPjtcclxuICAgIEdyb3VwczogQXJyYXk8TGF5ZXI+O1xyXG5cclxuICAgIE1hcERhdGE6IGFueTtcclxuXHJcbiAgICBVcGRhdGVEaXNwbGF5ZWQgPSAoY3VycmVudFNjYWxlKSA9PiB7XHJcbiAgICAgICAgdGhpcy5BbGxMYXllcnMuZm9yRWFjaChsYXllciA9PiB7XHJcbiAgICAgICAgICAgIGxheWVyLlVwZGF0ZURpc3BsYXllZChjdXJyZW50U2NhbGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgVXBkYXRlTWFwID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuUmVjYWxjdWxhdGVWaXNpYmxlTGF5ZXJJZHMoKTtcclxuICAgICAgICB0aGlzLk1hcERhdGEuc2V0TGF5ZXJzKHRoaXMuVmlzaWJsZUxheWVySWRzKTtcclxuICAgIH07XHJcbiAgICBSZWNhbGN1bGF0ZVZpc2libGVMYXllcklkcyA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLlZpc2libGVMYXllcklkcy5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuVmlzaWJsZUxheWVycy5mb3JFYWNoKHZpc0xheWVyID0+IHtcclxuICAgICAgICAgICAgdGhpcy5WaXNpYmxlTGF5ZXJJZHMucHVzaCh2aXNMYXllci5pZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuVmlzaWJsZUxheWVySWRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLlZpc2libGVMYXllcklkcy5wdXNoKC0xKTsgLy9hbHMgd2UgbmlldCBkb2VuIGRhbiB6b2VrdCBoaWogb3AgYWxsZSBsYWdlbiFcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59Il19