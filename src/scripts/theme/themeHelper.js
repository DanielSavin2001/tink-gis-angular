'use strict';
(function () {
    var module = angular.module('tink.gis');
    var service = function () {
        var themeHelper = {};
        themeHelper.createThemeFromJson = function (rawdata, themeData) {
            let theme = new app.ArcGIStheme(rawdata, themeData);
            return theme;
        };
        return themeHelper;
    };
    module.factory('ThemeHelper', service);
})();
(function () {
    var module = angular.module('tink.gis');
    var service = function ($http, $window, map, helperService) {
        var _service = {};
        _service.GetCapabilities = function (url) {
            var fullurl = url + '?request=GetCapabilities&service=WMS&callback=foo';
            var prom = $http({
                method: 'GET',
                url: helperService.CreateProxyUrl(fullurl),
                timeout: 10000,
                transformResponse: function (data) {
                    if (data) {
                        data = helperService.UnwrapProxiedData(data);
                        if (data.listOfHttpError) {
                            console.log(data.listOfHttpError, fullurl);
                        }
                        else {
                            var wms = new app.wmstheme(data, url);
                            return wms;
                        }
                    }
                }
            }).success(function (data, status, headers, config) {
            }).error(function (data, status, headers, config) {
                console.log('error: data, status, headers, config:');
                console.log(data);
                console.log(status);
                console.log(headers);
                console.log(config);
                $window.alert('error');
            });
            return prom;
        };
        return _service;
    };
    module.service('WMSService', ['$http', '$window', 'map', 'HelperService', service]);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWVIZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0aGVtZUhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxZQUFZLENBQUM7QUFDYixDQUFDO0lBQ0csSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4QyxJQUFJLE9BQU8sR0FBRztRQUNWLElBQUksV0FBVyxHQUFRLEVBQUUsQ0FBQztRQUMxQixXQUFXLENBQUMsbUJBQW1CLEdBQUcsVUFBVSxPQUFPLEVBQUUsU0FBUztZQUMxRCxJQUFJLEtBQUssR0FBb0IsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtZQUNwRSxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQztRQUNGLE1BQU0sQ0FBQyxXQUFXLENBQUM7SUFDdkIsQ0FBQyxDQUFDO0lBQ0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDM0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNMLENBQUM7SUFDRyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hDLElBQUksT0FBTyxHQUFHLFVBQVUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsYUFBYTtRQUN0RCxJQUFJLFFBQVEsR0FBUSxFQUFFLENBQUM7UUFFdkIsUUFBUSxDQUFDLGVBQWUsR0FBRyxVQUFVLEdBQUc7WUFDcEMsSUFBSSxPQUFPLEdBQUcsR0FBRyxHQUFHLG1EQUFtRCxDQUFDO1lBQ3hFLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQztnQkFDYixNQUFNLEVBQUUsS0FBSztnQkFDYixHQUFHLEVBQUUsYUFBYSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUM7Z0JBQzFDLE9BQU8sRUFBRSxLQUFLO2dCQUNkLGlCQUFpQixFQUFFLFVBQVUsSUFBSTtvQkFDN0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDUCxJQUFJLEdBQUcsYUFBYSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUM3QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQzs0QkFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO3dCQUMvQyxDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNKLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7NEJBQ3RDLE1BQU0sQ0FBQyxHQUFHLENBQUM7d0JBQ2YsQ0FBQztvQkFDTCxDQUFDO2dCQUNMLENBQUM7YUFDSixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTTtZQUVsRCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNO2dCQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7Z0JBQ3JELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUMsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0lBR0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUN4RixDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0ICogYXMgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcclxuLy8gaW1wb3J0IHtBcmNHSVN0aGVtZX0gZnJvbSAnLi9hcmNHSVN0aGVtZSc7XHJcbid1c2Ugc3RyaWN0JztcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgndGluay5naXMnKTtcclxuICAgIHZhciBzZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0aGVtZUhlbHBlcjogYW55ID0ge307XHJcbiAgICAgICAgdGhlbWVIZWxwZXIuY3JlYXRlVGhlbWVGcm9tSnNvbiA9IGZ1bmN0aW9uIChyYXdkYXRhLCB0aGVtZURhdGEpIHtcclxuICAgICAgICAgICAgbGV0IHRoZW1lOiBhcHAuQXJjR0lTdGhlbWUgPSBuZXcgYXBwLkFyY0dJU3RoZW1lKHJhd2RhdGEsIHRoZW1lRGF0YSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoZW1lO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoZW1lSGVscGVyO1xyXG4gICAgfTtcclxuICAgIG1vZHVsZS5mYWN0b3J5KCdUaGVtZUhlbHBlcicsIHNlcnZpY2UpO1xyXG59KSgpO1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCd0aW5rLmdpcycpO1xyXG4gICAgdmFyIHNlcnZpY2UgPSBmdW5jdGlvbiAoJGh0dHAsICR3aW5kb3csIG1hcCwgaGVscGVyU2VydmljZSkge1xyXG4gICAgICAgIHZhciBfc2VydmljZTogYW55ID0ge307XHJcblxyXG4gICAgICAgIF9zZXJ2aWNlLkdldENhcGFiaWxpdGllcyA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICAgICAgdmFyIGZ1bGx1cmwgPSB1cmwgKyAnP3JlcXVlc3Q9R2V0Q2FwYWJpbGl0aWVzJnNlcnZpY2U9V01TJmNhbGxiYWNrPWZvbyc7XHJcbiAgICAgICAgICAgIHZhciBwcm9tID0gJGh0dHAoe1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgIHVybDogaGVscGVyU2VydmljZS5DcmVhdGVQcm94eVVybChmdWxsdXJsKSxcclxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDEwMDAwLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2U6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGhlbHBlclNlcnZpY2UuVW53cmFwUHJveGllZERhdGEoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxpc3RPZkh0dHBFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YS5saXN0T2ZIdHRwRXJyb3IsIGZ1bGx1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdtcyA9IG5ldyBhcHAud21zdGhlbWUoZGF0YSwgdXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3bXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmRpcihkYXRhKTsgIC8vIFhNTCBkb2N1bWVudCBvYmplY3RcclxuICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3I6IGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnOicpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coaGVhZGVycyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjb25maWcpO1xyXG4gICAgICAgICAgICAgICAgJHdpbmRvdy5hbGVydCgnZXJyb3InKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9tO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBfc2VydmljZTtcclxuICAgIH07XHJcbiAgICAvLyBtb2R1bGUuJGluamVjdCA9IFsnSGVscGVyU2VydmljZSddO1xyXG5cclxuICAgIG1vZHVsZS5zZXJ2aWNlKCdXTVNTZXJ2aWNlJywgWyckaHR0cCcsICckd2luZG93JywgJ21hcCcsICdIZWxwZXJTZXJ2aWNlJywgc2VydmljZV0pO1xyXG59KSgpO1xyXG4iXX0=