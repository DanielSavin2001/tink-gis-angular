'use strict';
var app;
(function (app) {
    class LayerJSON {
        constructor() {
        }
    }
    app.LayerJSON = LayerJSON;
    class Layer extends LayerJSON {
        constructor(...args) {
            super(...args);
            this.type = LayerType.LAYER;
            this.UpdateDisplayed = (currentScale) => {
                if (this.maxScale > 0 || this.minScale > 0) {
                    console.log('MinMaxandCurrentScale', this.maxScale, this.minScale, currentScale);
                    if (currentScale > this.maxScale && currentScale < this.minScale) {
                        this.displayed = true;
                    }
                    else {
                        this.displayed = false;
                    }
                }
            };
        }
    }
    app.Layer = Layer;
    class wmslayer extends Layer {
        constructor(info, parenttheme) {
            super();
            Object.assign(this, info);
            this.visible = true;
            this.enabled = true;
            this.parent = null;
            this.displayed = true;
            this.theme = parenttheme;
            this.queryable = info.queryable;
            this.id = this.name;
        }
    }
    app.wmslayer = wmslayer;
    class arcgislayer extends Layer {
        constructor(info, parenttheme) {
            super();
            Object.assign(this, info);
            this.visible = info.defaultVisibility;
            this.enabled = true;
            this.parent = null;
            this.title = info.name;
            this.theme = parenttheme;
            this.displayed = true;
            if (this.parentLayerId === -1 && this.subLayerIds !== null) {
                this.type = LayerType.GROUP;
            }
        }
    }
    app.arcgislayer = arcgislayer;
})(app || (app = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsYXllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFVLEdBQUcsQ0FrRVo7QUFsRUQsV0FBVSxHQUFHLEVBQUMsQ0FBQztJQUVYO1FBUUk7UUFDQSxDQUFDO0lBQ0wsQ0FBQztJQVZZLGFBQVMsWUFVckIsQ0FBQTtJQUNELG9CQUFvQyxTQUFTO1FBQTdDO1lBQW9DLGVBQVM7WUFPekMsU0FBSSxHQUFXLFNBQVMsQ0FBQyxLQUFLLENBQUM7WUFFL0Isb0JBQWUsR0FBRyxDQUFDLFlBQVk7Z0JBQzNCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBQ2pGLEVBQUUsQ0FBQyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFDL0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7b0JBQzFCLENBQUM7b0JBQ0QsSUFBSSxDQUFDLENBQUM7d0JBQ0YsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7b0JBQzNCLENBQUM7Z0JBQ0wsQ0FBQztZQUNMLENBQUMsQ0FBQztRQUNOLENBQUM7SUFBRCxDQUFDO0lBcEJxQixTQUFLLFFBb0IxQixDQUFBO0lBQ0QsdUJBQThCLEtBQUs7UUFHL0IsWUFBWSxJQUFTLEVBQUUsV0FBa0I7WUFDckMsT0FBTyxDQUFDO1lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUM7WUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN4QixDQUFDO0lBQ0wsQ0FBQztJQWRZLFlBQVEsV0FjcEIsQ0FBQTtJQUNELDBCQUFpQyxLQUFLO1FBRWxDLFlBQVksSUFBZSxFQUFFLFdBQWtCO1lBQzNDLE9BQU8sQ0FBQztZQUNSLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN0QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDekQsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ2hDLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQWZZLGVBQVcsY0FldkIsQ0FBQTtBQUVMLENBQUMsRUFsRVMsR0FBRyxLQUFILEdBQUcsUUFrRVoiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcbi8vIGltcG9ydCB7VGhlbWV9IGZyb20gJy4vdGhlbWUnO1xyXG5uYW1lc3BhY2UgYXBwIHtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgTGF5ZXJKU09OIHtcclxuICAgICAgICBpZDogYW55O1xyXG4gICAgICAgIG5hbWU6IHN0cmluZztcclxuICAgICAgICBwYXJlbnRMYXllcklkOiBudW1iZXI7XHJcbiAgICAgICAgZGVmYXVsdFZpc2liaWxpdHk6IGJvb2xlYW47XHJcbiAgICAgICAgc3ViTGF5ZXJJZHM6IG51bWJlcltdO1xyXG4gICAgICAgIG1pblNjYWxlOiBudW1iZXI7XHJcbiAgICAgICAgbWF4U2NhbGU6IG51bWJlcjtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBleHBvcnQgYWJzdHJhY3QgY2xhc3MgTGF5ZXIgZXh0ZW5kcyBMYXllckpTT04ge1xyXG4gICAgICAgIHZpc2libGU6IGJvb2xlYW47XHJcbiAgICAgICAgZW5hYmxlZDogYm9vbGVhbjtcclxuICAgICAgICBwYXJlbnQ6IGFueTtcclxuICAgICAgICB0aGVtZTogVGhlbWU7XHJcbiAgICAgICAgdGl0bGU6IHN0cmluZztcclxuICAgICAgICBkaXNwbGF5ZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgdHlwZTogbnVtYmVyID0gTGF5ZXJUeXBlLkxBWUVSO1xyXG4gICAgICAgIExheWVyczogQXJyYXk8TGF5ZXI+O1xyXG4gICAgICAgIFVwZGF0ZURpc3BsYXllZCA9IChjdXJyZW50U2NhbGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWF4U2NhbGUgPiAwIHx8IHRoaXMubWluU2NhbGUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTWluTWF4YW5kQ3VycmVudFNjYWxlJywgdGhpcy5tYXhTY2FsZSwgdGhpcy5taW5TY2FsZSwgY3VycmVudFNjYWxlKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50U2NhbGUgPiB0aGlzLm1heFNjYWxlICYmIGN1cnJlbnRTY2FsZSA8IHRoaXMubWluU2NhbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXllZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXllZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBjbGFzcyB3bXNsYXllciBleHRlbmRzIExheWVyIHtcclxuICAgICAgICBxdWVyeWFibGU6IGJvb2xlYW47XHJcbiAgICAgICAgaWQ6IHN0cmluZztcclxuICAgICAgICBjb25zdHJ1Y3RvcihpbmZvOiBhbnksIHBhcmVudHRoZW1lOiBUaGVtZSkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGluZm8pO1xyXG4gICAgICAgICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy50aGVtZSA9IHBhcmVudHRoZW1lO1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5YWJsZSA9IGluZm8ucXVlcnlhYmxlO1xyXG4gICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5uYW1lOyAvL25hbWVzIGFyZSB0aGUgaWRzIG9mIHRoZSBsYXllciBpbiB3bXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBleHBvcnQgY2xhc3MgYXJjZ2lzbGF5ZXIgZXh0ZW5kcyBMYXllciB7XHJcbiAgICAgICAgaWQ6IG51bWJlcjtcclxuICAgICAgICBjb25zdHJ1Y3RvcihpbmZvOiBMYXllckpTT04sIHBhcmVudHRoZW1lOiBUaGVtZSkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGluZm8pO1xyXG4gICAgICAgICAgICB0aGlzLnZpc2libGUgPSBpbmZvLmRlZmF1bHRWaXNpYmlsaXR5O1xyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMudGl0bGUgPSBpbmZvLm5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMudGhlbWUgPSBwYXJlbnR0aGVtZTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnRMYXllcklkID09PSAtMSAmJiB0aGlzLnN1YkxheWVySWRzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBMYXllclR5cGUuR1JPVVA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==