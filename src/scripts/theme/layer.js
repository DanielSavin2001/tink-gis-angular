'use strict';
var app;
(function (app) {
    class LayerJSON {
        constructor() {
        }
    }
    app.LayerJSON = LayerJSON;
    class Layer extends LayerJSON {
        constructor(...args) {
            super(...args);
            this.type = LayerType.LAYER;
            this.UpdateDisplayed = (currentScale) => {
                if (this.maxScale > 0 || this.minScale > 0) {
                    console.log('MinMaxandCurrentScale', this.maxScale, this.minScale, currentScale);
                    if (currentScale > this.maxScale && currentScale < this.minScale) {
                        this.displayed = true;
                    }
                    else {
                        this.displayed = false;
                    }
                }
            };
        }
    }
    app.Layer = Layer;
    class wmslayer extends Layer {
        constructor(info, parenttheme) {
            super();
            Object.assign(this, info);
            this.visible = true;
            this.enabled = true;
            this.parent = null;
            this.displayed = true;
            this.theme = parenttheme;
            this.queryable = info.queryable;
            this.id = this.name;
        }
    }
    app.wmslayer = wmslayer;
    class arcgislayer extends Layer {
        constructor(info, parenttheme) {
            super();
            Object.assign(this, info);
            this.visible = info.defaultVisibility;
            this.enabled = true;
            this.parent = null;
            this.title = info.name;
            this.theme = parenttheme;
            this.displayed = true;
            if (this.subLayerIds !== null) {
                this.type = LayerType.GROUP;
            }
        }
    }
    app.arcgislayer = arcgislayer;
})(app || (app = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsYXllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFVLEdBQUcsQ0FrRVo7QUFsRUQsV0FBVSxHQUFHLEVBQUMsQ0FBQztJQUVYO1FBUUk7UUFDQSxDQUFDO0lBQ0wsQ0FBQztJQVZZLGFBQVMsWUFVckIsQ0FBQTtJQUNELG9CQUFvQyxTQUFTO1FBQTdDO1lBQW9DLGVBQVM7WUFPekMsU0FBSSxHQUFXLFNBQVMsQ0FBQyxLQUFLLENBQUM7WUFFL0Isb0JBQWUsR0FBRyxDQUFDLFlBQVk7Z0JBQzNCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBQ2pGLEVBQUUsQ0FBQyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFDL0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7b0JBQzFCLENBQUM7b0JBQ0QsSUFBSSxDQUFDLENBQUM7d0JBQ0YsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7b0JBQzNCLENBQUM7Z0JBQ0wsQ0FBQztZQUNMLENBQUMsQ0FBQztRQUNOLENBQUM7SUFBRCxDQUFDO0lBcEJxQixTQUFLLFFBb0IxQixDQUFBO0lBQ0QsdUJBQThCLEtBQUs7UUFHL0IsWUFBWSxJQUFTLEVBQUUsV0FBa0I7WUFDckMsT0FBTyxDQUFDO1lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUM7WUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN4QixDQUFDO0lBQ0wsQ0FBQztJQWRZLFlBQVEsV0FjcEIsQ0FBQTtJQUNELDBCQUFpQyxLQUFLO1FBRWxDLFlBQVksSUFBZSxFQUFFLFdBQWtCO1lBQzNDLE9BQU8sQ0FBQztZQUNSLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQztZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN0QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztZQUNoQyxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFmWSxlQUFXLGNBZXZCLENBQUE7QUFFTCxDQUFDLEVBbEVTLEdBQUcsS0FBSCxHQUFHLFFBa0VaIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG4vLyBpbXBvcnQge1RoZW1lfSBmcm9tICcuL3RoZW1lJztcclxubmFtZXNwYWNlIGFwcCB7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIExheWVySlNPTiB7XHJcbiAgICAgICAgaWQ6IGFueTtcclxuICAgICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgcGFyZW50TGF5ZXJJZDogbnVtYmVyO1xyXG4gICAgICAgIGRlZmF1bHRWaXNpYmlsaXR5OiBib29sZWFuO1xyXG4gICAgICAgIHN1YkxheWVySWRzOiBudW1iZXJbXTtcclxuICAgICAgICBtaW5TY2FsZTogbnVtYmVyO1xyXG4gICAgICAgIG1heFNjYWxlOiBudW1iZXI7XHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIExheWVyIGV4dGVuZHMgTGF5ZXJKU09OIHtcclxuICAgICAgICB2aXNpYmxlOiBib29sZWFuO1xyXG4gICAgICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgcGFyZW50OiBhbnk7XHJcbiAgICAgICAgdGhlbWU6IFRoZW1lO1xyXG4gICAgICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICAgICAgZGlzcGxheWVkOiBib29sZWFuO1xyXG4gICAgICAgIHR5cGU6IG51bWJlciA9IExheWVyVHlwZS5MQVlFUjtcclxuICAgICAgICBMYXllcnM6IEFycmF5PExheWVyPjtcclxuICAgICAgICBVcGRhdGVEaXNwbGF5ZWQgPSAoY3VycmVudFNjYWxlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1heFNjYWxlID4gMCB8fCB0aGlzLm1pblNjYWxlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ01pbk1heGFuZEN1cnJlbnRTY2FsZScsIHRoaXMubWF4U2NhbGUsIHRoaXMubWluU2NhbGUsIGN1cnJlbnRTY2FsZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNjYWxlID4gdGhpcy5tYXhTY2FsZSAmJiBjdXJyZW50U2NhbGUgPCB0aGlzLm1pblNjYWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBleHBvcnQgY2xhc3Mgd21zbGF5ZXIgZXh0ZW5kcyBMYXllciB7XHJcbiAgICAgICAgcXVlcnlhYmxlOiBib29sZWFuO1xyXG4gICAgICAgIGlkOiBzdHJpbmc7XHJcbiAgICAgICAgY29uc3RydWN0b3IoaW5mbzogYW55LCBwYXJlbnR0aGVtZTogVGhlbWUpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBpbmZvKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXllZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMudGhlbWUgPSBwYXJlbnR0aGVtZTtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeWFibGUgPSBpbmZvLnF1ZXJ5YWJsZTtcclxuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMubmFtZTsgLy9uYW1lcyBhcmUgdGhlIGlkcyBvZiB0aGUgbGF5ZXIgaW4gd21zXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXhwb3J0IGNsYXNzIGFyY2dpc2xheWVyIGV4dGVuZHMgTGF5ZXIge1xyXG4gICAgICAgIGlkOiBudW1iZXI7XHJcbiAgICAgICAgY29uc3RydWN0b3IoaW5mbzogTGF5ZXJKU09OLCBwYXJlbnR0aGVtZTogVGhlbWUpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBpbmZvKTtcclxuICAgICAgICAgICAgdGhpcy52aXNpYmxlID0gaW5mby5kZWZhdWx0VmlzaWJpbGl0eTtcclxuICAgICAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gaW5mby5uYW1lO1xyXG4gICAgICAgICAgICB0aGlzLnRoZW1lID0gcGFyZW50dGhlbWU7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3ViTGF5ZXJJZHMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IExheWVyVHlwZS5HUk9VUDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuIl19