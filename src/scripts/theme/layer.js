'use strict';
var app;
(function (app) {
    class LayerJSON {
        constructor() {
        }
    }
    app.LayerJSON = LayerJSON;
    class Layer extends LayerJSON {
        constructor(...args) {
            super(...args);
            this.UpdateDisplayed = (currentScale) => {
                if (this.maxScale > 0 || this.minScale > 0) {
                    console.log('MinMaxandCurrentScale', this.maxScale, this.minScale, currentScale);
                    if (currentScale > this.maxScale && currentScale < this.minScale) {
                        this.displayed = true;
                    }
                    else {
                        this.displayed = false;
                    }
                }
            };
        }
    }
    app.Layer = Layer;
    class wmslayer extends Layer {
        constructor(info, parenttheme) {
            super();
            Object.assign(this, info);
            this.visible = true;
            this.enabled = true;
            this.parent = null;
            this.displayed = true;
            this.theme = parenttheme;
            this.queryable = info.queryable;
            this.type = info.LAYER;
            this.id = this.name;
        }
    }
    app.wmslayer = wmslayer;
    class arcgislayer extends Layer {
        constructor(info, parenttheme) {
            super();
            Object.assign(this, info);
            this.visible = info.defaultVisibility;
            this.enabled = true;
            this.parent = null;
            this.title = info.name;
            this.theme = parenttheme;
            this.displayed = true;
            if (this.parentLayerId === -1 && this.subLayerIds !== null) {
                this.type = LayerType.GROUP;
            }
            else {
                this.type = LayerType.LAYER;
            }
        }
    }
    app.arcgislayer = arcgislayer;
})(app || (app = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsYXllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFVLEdBQUcsQ0FzRVo7QUF0RUQsV0FBVSxHQUFHLEVBQUMsQ0FBQztJQUVYO1FBUUk7UUFDQSxDQUFDO0lBQ0wsQ0FBQztJQVZZLGFBQVMsWUFVckIsQ0FBQTtJQUNELG9CQUFvQyxTQUFTO1FBQTdDO1lBQW9DLGVBQVM7WUFTekMsb0JBQWUsR0FBRyxDQUFDLFlBQVk7Z0JBQzNCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7b0JBQ2pGLEVBQUUsQ0FBQyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFDL0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7b0JBQzFCLENBQUM7b0JBQ0QsSUFBSSxDQUFDLENBQUM7d0JBQ0YsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7b0JBQzNCLENBQUM7Z0JBQ0wsQ0FBQztZQUNMLENBQUMsQ0FBQztRQUNOLENBQUM7SUFBRCxDQUFDO0lBcEJxQixTQUFLLFFBb0IxQixDQUFBO0lBQ0QsdUJBQThCLEtBQUs7UUFHL0IsWUFBWSxJQUFTLEVBQUUsV0FBa0I7WUFDckMsT0FBTyxDQUFDO1lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUM7WUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDeEIsQ0FBQztJQUNMLENBQUM7SUFmWSxZQUFRLFdBZXBCLENBQUE7SUFDRCwwQkFBaUMsS0FBSztRQUVsQyxZQUFZLElBQWUsRUFBRSxXQUFrQjtZQUMzQyxPQUFPLENBQUM7WUFDUixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztZQUN0QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUM7WUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDdEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztZQUNoQyxDQUFDO1lBQ0QsSUFBSSxDQUFDLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ2hDLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQWxCWSxlQUFXLGNBa0J2QixDQUFBO0FBRUwsQ0FBQyxFQXRFUyxHQUFHLEtBQUgsR0FBRyxRQXNFWiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuLy8gaW1wb3J0IHtUaGVtZX0gZnJvbSAnLi90aGVtZSc7XHJcbm5hbWVzcGFjZSBhcHAge1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBMYXllckpTT04ge1xyXG4gICAgICAgIGlkOiBhbnk7XHJcbiAgICAgICAgbmFtZTogc3RyaW5nO1xyXG4gICAgICAgIHBhcmVudExheWVySWQ6IG51bWJlcjtcclxuICAgICAgICBkZWZhdWx0VmlzaWJpbGl0eTogYm9vbGVhbjtcclxuICAgICAgICBzdWJMYXllcklkczogbnVtYmVyW107XHJcbiAgICAgICAgbWluU2NhbGU6IG51bWJlcjtcclxuICAgICAgICBtYXhTY2FsZTogbnVtYmVyO1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMYXllciBleHRlbmRzIExheWVySlNPTiB7XHJcbiAgICAgICAgdmlzaWJsZTogYm9vbGVhbjtcclxuICAgICAgICBlbmFibGVkOiBib29sZWFuO1xyXG4gICAgICAgIHBhcmVudDogYW55O1xyXG4gICAgICAgIHRoZW1lOiBUaGVtZTtcclxuICAgICAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgICAgIGRpc3BsYXllZDogYm9vbGVhbjtcclxuICAgICAgICB0eXBlOiBudW1iZXI7XHJcbiAgICAgICAgTGF5ZXJzOiBBcnJheTxMYXllcj47XHJcbiAgICAgICAgVXBkYXRlRGlzcGxheWVkID0gKGN1cnJlbnRTY2FsZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tYXhTY2FsZSA+IDAgfHwgdGhpcy5taW5TY2FsZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNaW5NYXhhbmRDdXJyZW50U2NhbGUnLCB0aGlzLm1heFNjYWxlLCB0aGlzLm1pblNjYWxlLCBjdXJyZW50U2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTY2FsZSA+IHRoaXMubWF4U2NhbGUgJiYgY3VycmVudFNjYWxlIDwgdGhpcy5taW5TY2FsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGNsYXNzIHdtc2xheWVyIGV4dGVuZHMgTGF5ZXIge1xyXG4gICAgICAgIHF1ZXJ5YWJsZTogYm9vbGVhbjtcclxuICAgICAgICBpZDogc3RyaW5nO1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGluZm86IGFueSwgcGFyZW50dGhlbWU6IFRoZW1lKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgaW5mbyk7XHJcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnRoZW1lID0gcGFyZW50dGhlbWU7XHJcbiAgICAgICAgICAgIHRoaXMucXVlcnlhYmxlID0gaW5mby5xdWVyeWFibGU7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IGluZm8uTEFZRVI7XHJcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLm5hbWU7IC8vbmFtZXMgYXJlIHRoZSBpZHMgb2YgdGhlIGxheWVyIGluIHdtc1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGV4cG9ydCBjbGFzcyBhcmNnaXNsYXllciBleHRlbmRzIExheWVyIHtcclxuICAgICAgICBpZDogbnVtYmVyO1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGluZm86IExheWVySlNPTiwgcGFyZW50dGhlbWU6IFRoZW1lKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgaW5mbyk7XHJcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IGluZm8uZGVmYXVsdFZpc2liaWxpdHk7XHJcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy50aXRsZSA9IGluZm8ubmFtZTtcclxuICAgICAgICAgICAgdGhpcy50aGVtZSA9IHBhcmVudHRoZW1lO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXllZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudExheWVySWQgPT09IC0xICYmIHRoaXMuc3ViTGF5ZXJJZHMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IExheWVyVHlwZS5HUk9VUDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IExheWVyVHlwZS5MQVlFUjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuIl19