'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _ = require('lodash');
var angular = require('angular');
var LayerRAW = (function () {
    function LayerRAW(layerJSON) {
        Object.assign(this, layerJSON);
    }
    return LayerRAW;
}());
var Layer = (function (_super) {
    __extends(Layer, _super);
    function Layer(info, parenttheme) {
        _super.call(this, LayerRAW);
        this.visible = info.defaultVisibility;
        this.enabled = true;
        this.parent = null;
        this.title = info.name;
        this.theme = parenttheme;
        this.displayed = true;
        if (this.parentLayerId === -1 && this.subLayerIds !== null) {
            this.type = LayerType.GROUP;
        }
        else {
            this.type = LayerType.LAYER;
        }
    }
    Layer.prototype.UpdateDisplayed = function (currentScale) {
        if (this.maxScale > 0 || this.minScale > 0) {
            console.log('MinMaxandCurrentScale', this.maxScale, this.minScale, currentScale);
            if (currentScale > this.maxScale && currentScale < this.minScale) {
                this.displayed = true;
            }
            else {
                this.displayed = false;
            }
        }
    };
    ;
    return Layer;
}(LayerRAW));
var Theme = (function () {
    function Theme() {
    }
    Theme.prototype.UpdateDisplayed = function (currentScale) {
        this.AllLayers.forEach(function (layer) {
            layer.UpdateDisplayed(currentScale);
        });
    };
    Theme.prototype.UpdateMap = function () {
        this.RecalculateVisibleLayerIds();
        this.MapData.setLayers(this.VisibleLayerIds);
    };
    ;
    Theme.prototype.RecalculateVisibleLayerIds = function () {
        this.VisibleLayerIds.length = 0;
        this.VisibleLayers.forEach(function (visLayer) {
            this.VisibleLayerIds.push(visLayer.id);
        });
        if (this.VisibleLayerIds.length === 0) {
            this.VisibleLayerIds.push(-1);
        }
    };
    ;
    return Theme;
}());
var ArcGIStheme = (function (_super) {
    __extends(ArcGIStheme, _super);
    function ArcGIStheme(rawdata, themeData) {
        _super.call(this);
        var rawlayers = rawdata.layers;
        this.Naam = rawdata.documentInfo.Title;
        this.name = rawdata.documentInfo.Title;
        this.Description = rawdata.documentInfo.Subject;
        this.Layers = [];
        this.AllLayers = [];
        this.Groups = [];
        this.CleanUrl = themeData.cleanUrl;
        this.Url = themeData.url;
        this.VisibleLayers = [];
        this.VisibleLayerIds = [];
        this.Visible = true;
        this.Added = false;
        this.enabled = true;
        this.Type = ThemeType.ESRI;
        this.status = ThemeStatus.NEW;
        this.MapData = {};
        _.each(rawlayers, function (layerInfo) {
            var layer = new Layer(layerInfo, this);
            this.AllLayers.push(layer);
            if (layer.parentLayerId === -1) {
                if (layer.subLayerIds === null) {
                    this.Layers.push(layer);
                }
                else {
                    this.Groups.push(layer);
                }
            }
        });
        _.each(this.Groups, function (layerGroup) {
            if (layerGroup.subLayerIds !== null) {
                layerGroup.Layers = [];
                _.each(rawlayers, function (rawlayer) {
                    if (layerGroup.id === rawlayer.parentLayerId) {
                        rawlayer.parent = layerGroup;
                        layerGroup.Layers.push(rawlayer);
                    }
                });
            }
        });
        this.RecalculateVisibleLayerIds();
    }
    return ArcGIStheme;
}(Theme));
(function () {
    var module = angular.module('tink.gis');
    var service = function () {
        var themeHelper = {};
        themeHelper.createThemeFromJson = function (rawdata, themeData) {
            var theme = new ArcGIStheme(rawdata, themeData);
            return theme;
        };
        return themeHelper;
    };
    module.factory('ThemeHelper', service);
})();
//# sourceMappingURL=data:application/json;base64,