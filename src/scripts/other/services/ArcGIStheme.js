'use strict';
class LayerRAW {
    constructor(layerJSON) {
        Object.assign(this, layerJSON);
    }
}
class Layer extends LayerRAW {
    constructor(info, parenttheme) {
        super(info);
        this.UpdateDisplayed = (currentScale) => {
            if (this.maxScale > 0 || this.minScale > 0) {
                console.log('MinMaxandCurrentScale', this.maxScale, this.minScale, currentScale);
                if (currentScale > this.maxScale && currentScale < this.minScale) {
                    this.displayed = true;
                }
                else {
                    this.displayed = false;
                }
            }
        };
        this.visible = info.defaultVisibility;
        this.enabled = true;
        this.parent = null;
        this.title = info.name;
        this.theme = parenttheme;
        this.displayed = true;
        if (this.parentLayerId === -1 && this.subLayerIds !== null) {
            this.type = LayerType.GROUP;
        }
        else {
            this.type = LayerType.LAYER;
        }
    }
}
class Theme {
    constructor() {
        this.UpdateDisplayed = (currentScale) => {
            this.AllLayers.forEach(layer => {
                layer.UpdateDisplayed(currentScale);
            });
        };
        this.UpdateMap = () => {
            this.RecalculateVisibleLayerIds();
            this.MapData.setLayers(this.VisibleLayerIds);
        };
        this.RecalculateVisibleLayerIds = () => {
            this.VisibleLayerIds.length = 0;
            this.VisibleLayers.forEach(visLayer => {
                this.VisibleLayerIds.push(visLayer.id);
            });
            if (this.VisibleLayerIds.length === 0) {
                this.VisibleLayerIds.push(-1);
            }
        };
    }
}
class ArcGIStheme extends Theme {
    constructor(rawdata, themeData) {
        super();
        let rawlayers = rawdata.layers;
        this.Naam = rawdata.documentInfo.Title;
        this.name = rawdata.documentInfo.Title;
        this.Description = rawdata.documentInfo.Subject;
        this.Layers = [];
        this.AllLayers = [];
        this.Groups = [];
        this.CleanUrl = themeData.cleanUrl;
        this.Url = themeData.url;
        this.VisibleLayers = [];
        this.VisibleLayerIds = [];
        this.Visible = true;
        this.Added = false;
        this.enabled = true;
        this.Type = ThemeType.ESRI;
        this.status = ThemeStatus.NEW;
        this.MapData = {};
        rawlayers.forEach((layerInfo) => {
            let layer = new Layer(layerInfo, this);
            this.AllLayers.push(layer);
            if (layer.parentLayerId === -1) {
                if (layer.subLayerIds === null) {
                    this.Layers.push(layer);
                }
                else {
                    this.Groups.push(layer);
                }
            }
        });
        this.Groups.forEach((layerGroup) => {
            if (layerGroup.subLayerIds !== null) {
                layerGroup.Layers = [];
                this.AllLayers.forEach((layer) => {
                    if (layerGroup.id === layer.parentLayerId) {
                        layer.parent = layerGroup;
                        layerGroup.Layers.push(layer);
                    }
                });
            }
        });
        this.RecalculateVisibleLayerIds();
    }
}
(function () {
    var module = angular.module('tink.gis');
    var service = function () {
        var themeHelper = {};
        themeHelper.createThemeFromJson = function (rawdata, themeData) {
            let theme = new ArcGIStheme(rawdata, themeData);
            return theme;
        };
        return themeHelper;
    };
    module.factory('ThemeHelper', service);
})();
//# sourceMappingURL=data:application/json;base64,